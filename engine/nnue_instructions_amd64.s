//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_update_hidden(SB), $72-56

	MOVQ previous_outputs+0(FP), DI
	MOVQ update_indices+8(FP), SI
	MOVQ update_coeffs+16(FP), DX
	MOVQ update_size+24(FP), CX
	MOVQ weights+32(FP), R8
	MOVQ outputs+40(FP), R9
	MOVQ outputs_len+48(FP), R10
	ADDQ $8, SP
	MOVQ R10, 56(SP)

	LONG $0x24548948; BYTE $0x28 // mov    qword [rsp + 40], rdx
	LONG $0x24748948; BYTE $0x30 // mov    qword [rsp + 48], rsi
	LONG $0x38247c83; BYTE $0x00 // cmp    dword 56[rsp], 0 /* [rbp + 16] */
	JLE  LBB0_45
	WORD $0x894d; BYTE $0xc7     // mov    r15, r8
	WORD $0x8949; BYTE $0xfb     // mov    r11, rdi
	LONG $0x3824448b             // mov    eax, dword 56[rsp] /* [rbp + 16] */
	WORD $0xc789                 // mov    edi, eax
	WORD $0xf883; BYTE $0x08     // cmp    eax, 8
	JB   LBB0_2
	LONG $0x7b048d49             // lea    rax, [r11 + 2*rdi]
	WORD $0x394c; BYTE $0xc8     // cmp    rax, r9
	JBE  LBB0_6
	LONG $0x79048d49             // lea    rax, [r9 + 2*rdi]
	WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JBE  LBB0_6

LBB0_2:
	WORD $0xc031 // xor    eax, eax

LBB0_18:
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x0148; BYTE $0xfa // add    rdx, rdi
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_20

LBB0_19:
	LONG $0x1cb70f41; BYTE $0x43 // movzx    ebx, word [r11 + 2*rax]
	LONG $0x1c894166; BYTE $0x41 // mov    word [r9 + 2*rax], bx
	LONG $0x01c08348             // add    rax, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_19

LBB0_20:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB0_22

LBB0_21:
	LONG $0x14b70f41; BYTE $0x43   // movzx    edx, word [r11 + 2*rax]
	LONG $0x14894166; BYTE $0x41   // mov    word [r9 + 2*rax], dx
	LONG $0x54b70f41; WORD $0x0243 // movzx    edx, word [r11 + 2*rax + 2]
	LONG $0x54894166; WORD $0x0241 // mov    word [r9 + 2*rax + 2], dx
	LONG $0x54b70f41; WORD $0x0443 // movzx    edx, word [r11 + 2*rax + 4]
	LONG $0x54894166; WORD $0x0441 // mov    word [r9 + 2*rax + 4], dx
	LONG $0x54b70f41; WORD $0x0643 // movzx    edx, word [r11 + 2*rax + 6]
	LONG $0x54894166; WORD $0x0641 // mov    word [r9 + 2*rax + 6], dx
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc7       // cmp    rdi, rax
	JNE  LBB0_21

LBB0_22:
	LONG $0x38247c83; BYTE $0x00 // cmp    dword 56[rsp], 0 /* [rbp + 16] */
	JLE  LBB0_45
	WORD $0xc985                 // test    ecx, ecx
	JLE  LBB0_45
	WORD $0xc889                 // mov    eax, ecx
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	LONG $0x79048d49             // lea    rax, [r9 + 2*rdi]
	LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	LONG $0x7f048d49             // lea    rax, [r15 + 2*rdi]
	LONG $0x24448948; BYTE $0x18 // mov    qword [rsp + 24], rax
	WORD $0xf889                 // mov    eax, edi
	WORD $0xe083; BYTE $0xc0     // and    eax, -64
	WORD $0xfe89                 // mov    esi, edi
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	WORD $0x8949; BYTE $0xf8     // mov    r8, rdi
	WORD $0xf749; BYTE $0xd8     // neg    r8
	LONG $0x604f8d49             // lea    rcx, [r15 + 96]
	LONG $0x240c8948             // mov    qword [rsp], rcx
	LONG $0x024f8d49             // lea    rcx, [r15 + 2]
	LONG $0x244c8948; BYTE $0x10 // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xe4     // xor    r12d, r12d
	LONG $0x245c634c; BYTE $0x38 // movsxd    r11, dword 56[rsp] /* [rbp + 16] */
	JMP  LBB0_26

LBB0_25:
	LONG $0x01c48349             // add    r12, 1
	LONG $0x24643b4c; BYTE $0x20 // cmp    r12, qword [rsp + 32]
	JE   LBB0_45

LBB0_26:
	LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
	LONG $0x2cbf0f4e; BYTE $0x61 // movsx    r13, word [rcx + 2*r12]
	LONG $0xebaf0f4d             // imul    r13, r11
	LONG $0x244c8b48; BYTE $0x28 // mov    rcx, qword [rsp + 40]
	LONG $0x14be0f46; BYTE $0x21 // movsx    r10d, byte [rcx + r12]
	LONG $0x38247c83; BYTE $0x08 // cmp    dword 56[rsp], 8 /* [rbp + 16] */
	JB   LBB0_27
	LONG $0x6f348d4f             // lea    r14, [r15 + 2*r13]
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	LONG $0x69148d4a             // lea    rdx, [rcx + 2*r13]
	WORD $0x394c; BYTE $0xca     // cmp    rdx, r9
	JBE  LBB0_31
	LONG $0x24743b4c; BYTE $0x08 // cmp    r14, qword [rsp + 8]
	JAE  LBB0_31

LBB0_27:
	WORD $0xdb31 // xor    ebx, ebx

LBB0_40:
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x01c7f640             // test    dil, 1
	JE   LBB0_42
	LONG $0x2b148d4a             // lea    rdx, [rbx + r13]
	LONG $0x14b70f41; BYTE $0x57 // movzx    edx, word [r15 + 2*rdx]
	LONG $0xaf0f4166; BYTE $0xd2 // imul    dx, r10w
	LONG $0x14014166; BYTE $0x59 // add    word [r9 + 2*rbx], dx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x01ca8348             // or    rdx, 1

LBB0_42:
	WORD $0xf748; BYTE $0xd3     // not    rbx
	WORD $0x394c; BYTE $0xc3     // cmp    rbx, r8
	JE   LBB0_25
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	LONG $0x691c8d4a             // lea    rbx, [rcx + 2*r13]

LBB0_44:
	LONG $0x534cb70f; BYTE $0xfe   // movzx    ecx, word [rbx + 2*rdx - 2]
	LONG $0xaf0f4166; BYTE $0xca   // imul    cx, r10w
	LONG $0x0c014166; BYTE $0x51   // add    word [r9 + 2*rdx], cx
	LONG $0x530cb70f               // movzx    ecx, word [rbx + 2*rdx]
	LONG $0xaf0f4166; BYTE $0xca   // imul    cx, r10w
	LONG $0x4c014166; WORD $0x0251 // add    word [r9 + 2*rdx + 2], cx
	LONG $0x02c28348               // add    rdx, 2
	WORD $0x3948; BYTE $0xd7       // cmp    rdi, rdx
	JNE  LBB0_44
	JMP  LBB0_25

LBB0_31:
	LONG $0x38247c83; BYTE $0x40 // cmp    dword 56[rsp], 64 /* [rbp + 16] */
	JAE  LBB0_33
	WORD $0xd231                 // xor    edx, edx
	JMP  LBB0_37

LBB0_33:
	WORD $0x894c; BYTE $0xfb       // mov    rbx, r15
	LONG $0x6e79c1c4; BYTE $0xc2   // vmovd    xmm0, r10d
	LONG $0xc070fbc5; BYTE $0x00   // vpshuflw    xmm0, xmm0, 0
	LONG $0xc070f9c5; BYTE $0x00   // vpshufd    xmm0, xmm0, 0
	LONG $0x187de3c4; WORD $0x01c0 // vinsertf128    ymm0, ymm0, xmm0, 1
	LONG $0x240c8b48               // mov    rcx, qword [rsp]
	LONG $0x693c8d4e               // lea    r15, [rcx + 2*r13]
	WORD $0xd231                   // xor    edx, edx

LBB0_34:
	LONG $0xd57941c4; WORD $0x5744; BYTE $0xa0 // vpmullw    xmm8, xmm0, oword [r15 + 2*rdx - 96]
	LONG $0x197de3c4; WORD $0x01c2             // vextractf128    xmm2, ymm0, 1
	LONG $0xd569c1c4; WORD $0x575c; BYTE $0xb0 // vpmullw    xmm3, xmm2, oword [r15 + 2*rdx - 80]
	LONG $0xd57941c4; WORD $0x574c; BYTE $0xc0 // vpmullw    xmm9, xmm0, oword [r15 + 2*rdx - 64]
	LONG $0xd569c1c4; WORD $0x576c; BYTE $0xd0 // vpmullw    xmm5, xmm2, oword [r15 + 2*rdx - 48]
	LONG $0xd57941c4; WORD $0x5754; BYTE $0xe0 // vpmullw    xmm10, xmm0, oword [r15 + 2*rdx - 32]
	LONG $0xd569c1c4; WORD $0x577c; BYTE $0xf0 // vpmullw    xmm7, xmm2, oword [r15 + 2*rdx - 16]
	LONG $0xd57941c4; WORD $0x571c             // vpmullw    xmm11, xmm0, oword [r15 + 2*rdx]
	LONG $0xd569c1c4; WORD $0x5754; BYTE $0x10 // vpmullw    xmm2, xmm2, oword [r15 + 2*rdx + 16]
	LONG $0xfd61c1c4; WORD $0x515c; BYTE $0x10 // vpaddw    xmm3, xmm3, oword [r9 + 2*rdx + 16]
	LONG $0xfd39c1c4; WORD $0x5124             // vpaddw    xmm4, xmm8, oword [r9 + 2*rdx]
	LONG $0xfd51c1c4; WORD $0x516c; BYTE $0x30 // vpaddw    xmm5, xmm5, oword [r9 + 2*rdx + 48]
	LONG $0xfd31c1c4; WORD $0x5174; BYTE $0x20 // vpaddw    xmm6, xmm9, oword [r9 + 2*rdx + 32]
	LONG $0xfd41c1c4; WORD $0x517c; BYTE $0x50 // vpaddw    xmm7, xmm7, oword [r9 + 2*rdx + 80]
	LONG $0xfd29c1c4; WORD $0x514c; BYTE $0x40 // vpaddw    xmm1, xmm10, oword [r9 + 2*rdx + 64]
	LONG $0xfd6941c4; WORD $0x5144; BYTE $0x70 // vpaddw    xmm8, xmm2, oword [r9 + 2*rdx + 112]
	LONG $0xfd21c1c4; WORD $0x5154; BYTE $0x60 // vpaddw    xmm2, xmm11, oword [r9 + 2*rdx + 96]
	LONG $0x7f7ac1c4; WORD $0x5124             // vmovdqu    oword [r9 + 2*rdx], xmm4
	LONG $0x7f7ac1c4; WORD $0x515c; BYTE $0x10 // vmovdqu    oword [r9 + 2*rdx + 16], xmm3
	LONG $0x7f7ac1c4; WORD $0x5174; BYTE $0x20 // vmovdqu    oword [r9 + 2*rdx + 32], xmm6
	LONG $0x7f7ac1c4; WORD $0x516c; BYTE $0x30 // vmovdqu    oword [r9 + 2*rdx + 48], xmm5
	LONG $0x7f7ac1c4; WORD $0x514c; BYTE $0x40 // vmovdqu    oword [r9 + 2*rdx + 64], xmm1
	LONG $0x7f7ac1c4; WORD $0x517c; BYTE $0x50 // vmovdqu    oword [r9 + 2*rdx + 80], xmm7
	LONG $0x7f7ac1c4; WORD $0x5154; BYTE $0x60 // vmovdqu    oword [r9 + 2*rdx + 96], xmm2
	LONG $0x7f7a41c4; WORD $0x5144; BYTE $0x70 // vmovdqu    oword [r9 + 2*rdx + 112], xmm8
	LONG $0x40c28348                           // add    rdx, 64
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB0_34
	WORD $0x3948; BYTE $0xf8                   // cmp    rax, rdi
	WORD $0x8949; BYTE $0xdf                   // mov    r15, rbx
	JE   LBB0_25
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x38c7f640                           // test    dil, 56
	JE   LBB0_40

LBB0_37:
	LONG $0x6e79c1c4; BYTE $0xc2 // vmovd    xmm0, r10d
	LONG $0xc070fbc5; BYTE $0x00 // vpshuflw    xmm0, xmm0, 0
	LONG $0xc070f9c5; BYTE $0x00 // vpshufd    xmm0, xmm0, 0

LBB0_38:
	LONG $0xd579c1c4; WORD $0x560c // vpmullw    xmm1, xmm0, oword [r14 + 2*rdx]
	LONG $0xfd71c1c4; WORD $0x510c // vpaddw    xmm1, xmm1, oword [r9 + 2*rdx]
	LONG $0x7f7ac1c4; WORD $0x510c // vmovdqu    oword [r9 + 2*rdx], xmm1
	LONG $0x08c28348               // add    rdx, 8
	WORD $0x3948; BYTE $0xd6       // cmp    rsi, rdx
	JNE  LBB0_38
	WORD $0x8948; BYTE $0xf3       // mov    rbx, rsi
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JE   LBB0_25
	JMP  LBB0_40

LBB0_45:
	SUBQ $8, SP
	VZEROUPPER
	RET

LBB0_6:
	LONG $0x38247c83; BYTE $0x40 // cmp    dword 56[rsp], 64 /* [rbp + 16] */
	JAE  LBB0_8
	WORD $0xc031                 // xor    eax, eax
	JMP  LBB0_15

LBB0_8:
	WORD $0xf889             // mov    eax, edi
	WORD $0xe083; BYTE $0xc0 // and    eax, -64
	LONG $0xc0508d48         // lea    rdx, [rax - 64]
	WORD $0x8949; BYTE $0xd2 // mov    r10, rdx
	LONG $0x06eac149         // shr    r10, 6
	LONG $0x01c28349         // add    r10, 1
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_46
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0xfee28348         // and    rdx, -2
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xdb31             // xor    ebx, ebx

LBB0_10:
	LONG $0x107cc1c4; WORD $0x5b04             // vmovups    ymm0, yword [r11 + 2*rbx]
	LONG $0x107cc1c4; WORD $0x5b4c; BYTE $0x20 // vmovups    ymm1, yword [r11 + 2*rbx + 32]
	LONG $0x107cc1c4; WORD $0x5b54; BYTE $0x40 // vmovups    ymm2, yword [r11 + 2*rbx + 64]
	LONG $0x107cc1c4; WORD $0x5b5c; BYTE $0x60 // vmovups    ymm3, yword [r11 + 2*rbx + 96]
	LONG $0x117cc1c4; WORD $0x5904             // vmovups    yword [r9 + 2*rbx], ymm0
	LONG $0x117cc1c4; WORD $0x594c; BYTE $0x20 // vmovups    yword [r9 + 2*rbx + 32], ymm1
	LONG $0x117cc1c4; WORD $0x5954; BYTE $0x40 // vmovups    yword [r9 + 2*rbx + 64], ymm2
	LONG $0x117cc1c4; WORD $0x595c; BYTE $0x60 // vmovups    yword [r9 + 2*rbx + 96], ymm3
	QUAD $0x00805b846f7ec1c4; WORD $0x0000     // vmovdqu    ymm0, yword [r11 + 2*rbx + 128]
	QUAD $0x00a05b8c6f7ec1c4; WORD $0x0000     // vmovdqu    ymm1, yword [r11 + 2*rbx + 160]
	QUAD $0x00c05b946f7ec1c4; WORD $0x0000     // vmovdqu    ymm2, yword [r11 + 2*rbx + 192]
	QUAD $0x00e05b9c6f7ec1c4; WORD $0x0000     // vmovdqu    ymm3, yword [r11 + 2*rbx + 224]
	QUAD $0x008059847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 2*rbx + 128], ymm0
	QUAD $0x00a0598c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 2*rbx + 160], ymm1
	QUAD $0x00c059947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 2*rbx + 192], ymm2
	QUAD $0x00e0599c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r9 + 2*rbx + 224], ymm3
	LONG $0x80eb8348                           // sub    rbx, -128
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB0_10
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB0_13

LBB0_12:
	LONG $0x6f7ec1c4; WORD $0x5b04             // vmovdqu    ymm0, yword [r11 + 2*rbx]
	LONG $0x6f7ec1c4; WORD $0x5b4c; BYTE $0x20 // vmovdqu    ymm1, yword [r11 + 2*rbx + 32]
	LONG $0x6f7ec1c4; WORD $0x5b54; BYTE $0x40 // vmovdqu    ymm2, yword [r11 + 2*rbx + 64]
	LONG $0x6f7ec1c4; WORD $0x5b5c; BYTE $0x60 // vmovdqu    ymm3, yword [r11 + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x5904             // vmovdqu    yword [r9 + 2*rbx], ymm0
	LONG $0x7f7ec1c4; WORD $0x594c; BYTE $0x20 // vmovdqu    yword [r9 + 2*rbx + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x5954; BYTE $0x40 // vmovdqu    yword [r9 + 2*rbx + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x595c; BYTE $0x60 // vmovdqu    yword [r9 + 2*rbx + 96], ymm3

LBB0_13:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JE   LBB0_22
	LONG $0x38c7f640         // test    dil, 56
	JE   LBB0_18

LBB0_15:
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	WORD $0xf889             // mov    eax, edi
	WORD $0xe083; BYTE $0xf8 // and    eax, -8

LBB0_16:
	LONG $0x6f7ac1c4; WORD $0x5304 // vmovdqu    xmm0, oword [r11 + 2*rdx]
	LONG $0x7f7ac1c4; WORD $0x5104 // vmovdqu    oword [r9 + 2*rdx], xmm0
	LONG $0x08c28348               // add    rdx, 8
	WORD $0x3948; BYTE $0xd0       // cmp    rax, rdx
	JNE  LBB0_16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JE   LBB0_22
	JMP  LBB0_18

LBB0_46:
	WORD $0xdb31     // xor    ebx, ebx
	LONG $0x01c2f641 // test    r10b, 1
	JNE  LBB0_12
	JMP  LBB0_13

TEXT Â·_quick_feed(SB), $0-40

	MOVQ hidden_outputs+0(FP), DI
	MOVQ hidden_outputs_len+8(FP), SI
	MOVQ weights+16(FP), DX
	MOVQ weights_len+24(FP), CX
	MOVQ res+32(FP), R8

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB1_1
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0xf983; BYTE $0x20 // cmp    ecx, 32
	JAE  LBB1_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xf631             // xor    esi, esi
	JMP  LBB1_7

LBB1_1:
	WORD $0xf631 // xor    esi, esi
	JMP  LBB1_8

LBB1_4:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xef3941c4; BYTE $0xc0 // vpxor    xmm8, xmm8, xmm8
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc9eff1c5             // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5             // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5             // vpxor    xmm3, xmm3, xmm3
	LONG $0xe4efd9c5             // vpxor    xmm4, xmm4, xmm4

LBB1_5:
	LONG $0x2ceeb9c5; BYTE $0x77   // vpmaxsw    xmm5, xmm8, oword [rdi + 2*rsi]
	LONG $0x74eeb9c5; WORD $0x1077 // vpmaxsw    xmm6, xmm8, oword [rdi + 2*rsi + 16]
	LONG $0x7ceeb9c5; WORD $0x2077 // vpmaxsw    xmm7, xmm8, oword [rdi + 2*rsi + 32]
	LONG $0x44eeb9c5; WORD $0x3077 // vpmaxsw    xmm0, xmm8, oword [rdi + 2*rsi + 48]
	LONG $0x2cd5d1c5; BYTE $0x72   // vpmullw    xmm5, xmm5, oword [rdx + 2*rsi]
	LONG $0xc9fdd1c5               // vpaddw    xmm1, xmm5, xmm1
	LONG $0x6cd5c9c5; WORD $0x1072 // vpmullw    xmm5, xmm6, oword [rdx + 2*rsi + 16]
	LONG $0xd2fdd1c5               // vpaddw    xmm2, xmm5, xmm2
	LONG $0x6cd5c1c5; WORD $0x2072 // vpmullw    xmm5, xmm7, oword [rdx + 2*rsi + 32]
	LONG $0x44d5f9c5; WORD $0x3072 // vpmullw    xmm0, xmm0, oword [rdx + 2*rsi + 48]
	LONG $0xdbfdd1c5               // vpaddw    xmm3, xmm5, xmm3
	LONG $0xe4fdf9c5               // vpaddw    xmm4, xmm0, xmm4
	LONG $0x20c68348               // add    rsi, 32
	WORD $0x3948; BYTE $0xf1       // cmp    rcx, rsi
	JNE  LBB1_5
	LONG $0xc1fde9c5               // vpaddw    xmm0, xmm2, xmm1
	LONG $0xc0fde1c5               // vpaddw    xmm0, xmm3, xmm0
	LONG $0xc0fdd9c5               // vpaddw    xmm0, xmm4, xmm0
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd    xmm1, xmm0, 238
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x55   // vpshufd    xmm1, xmm0, 85
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xd072f1c5; BYTE $0x10   // vpsrld    xmm1, xmm0, 16
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc67ef9c5               // vmovd    esi, xmm0
	WORD $0x394c; BYTE $0xd1       // cmp    rcx, r10
	JE   LBB1_8

LBB1_7:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	WORD $0x8566; BYTE $0xc0     // test    ax, ax
	LONG $0xc1480f41             // cmovs    eax, r9d
	LONG $0x04af0f66; BYTE $0x4a // imul    ax, word [rdx + 2*rcx]
	WORD $0xc601                 // add    esi, eax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_7

LBB1_8:
	LONG $0x30894166 // mov    word [r8], si
	RET
